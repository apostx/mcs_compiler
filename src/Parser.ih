// Generated by Bisonc++ V4.09.02

// Include this file in the sources of the class Parser.

// $insert class.h
#include "Parser.h"

inline void Parser::error(char const *msg) {
	std::cerr << d_loc__.first_line << ": Syntax error" << std::endl;
	exit(1);
}

inline VariableDescriptor Parser::manageDeclaration(std::string const *variableName) {
	if (0 < symbolTable.count(*variableName)) {
		std::cerr << d_loc__.first_line << ": Semantics error: Duplicate declaration: \"" << *variableName << "\" (line:" << symbolTable[*variableName].line << ")" << std::endl;
		exit(1);
	} else
		symbolTable[*variableName] = VariableDescriptor(d_loc__.first_line, *variableName);

	return symbolTable[*variableName];
}

inline VariableDescriptor Parser::manageVariable(std::string const *variableName) {
	if (symbolTable.count(*variableName) == 0) {
		std::cerr << d_loc__.first_line << ": Semantics error: Missing declaration: \"" << *variableName << "\"" << std::endl;
		exit(1);
	}	

	return symbolTable[*variableName];
}

inline ConstantDescriptor Parser::manageConstant(std::string const *constantValue, Type type) {
	if (constantTable.count(*constantValue) == 0) {
		std::ostringstream id;
        	id << constantTable.size();

		constantTable[*constantValue] = ConstantDescriptor(d_loc__.first_line, id.str(), type, *constantValue);
	}

	return constantTable[*constantValue];
}

// $insert lex
inline int Parser::lex() {
	int ret = lexer.yylex();

	switch(ret) {
		case Parser::IDENTIFIER:
		case Parser::NUMBER:
		case Parser::STRING:
			d_val__.text = new std::string(lexer.YYText());
			break;
	}	

	d_loc__.first_line = lexer.lineno();
	return ret;
}

inline void Parser::print() {
	print__(); // displays tokens if --print was specified
}

inline void Parser::exceptionHandler__(std::exception const &exc) {
	throw; // re-implement to handle exceptions thrown by actions
}

// Add here includes that are only required for the compilation 
// of Parser's sources.

// UN-comment the next using-declaration if you want to use
// int Parser's sources symbols from the namespace std without
// specifying std::

//using namespace std;
